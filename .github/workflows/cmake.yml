name: CMake

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-firmware:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    name: build-frmware

    steps:
    - uses: actions/checkout@v2

    - name: Install libs
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: sudo apt-get install -y gcc-arm-none-eabi

    - name: Build firmware
      shell: bash
      run: make -C ./SDDC_FX3

    - uses: actions/upload-artifact@v2
      with:
        name: firmware
        path: ./SDDC_FX3/SDDC_FX3.img

  build-on-windows:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019
    needs: build-firmware

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G "Visual Studio 16 2019" -A Win32

    - uses: actions/download-artifact@v2
      with:
        name: firmware

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Install FFTW3
      working-directory: ${{runner.workspace}}/build
      shell: powershell
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: Invoke-WebRequest -Uri "ftp://ftp.fftw.org/pub/fftw/fftw-3.3.5-dll32.zip" -OutFile fftw-3.3.5-dll32.zip

    - name: Unzip FFTW3
      working-directory: ${{runner.workspace}}/build
      shell: powershell
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: Expand-Archive -Path .\fftw-3.3.5-dll32.zip -DestinationPath unittest

    - name: Create Package
      shell: powershell
      run: Compress-Archive -DestinationPath SDDC_EXTIO.ZIP -LiteralPath ${{runner.workspace}}/build/ExtIO_sddc/Release/ExtIO_SDDC.dll,${{runner.workspace}}/build/unittest/libfftw3f-3.dll,README.md

    - uses: actions/upload-artifact@v2
      with:
        name: extio-package
        path: SDDC_EXTIO.ZIP

  build-on-linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install libs
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: sudo apt-get install -y libfftw3-dev libusb-1.0-0-dev gcc-arm-none-eabi

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

